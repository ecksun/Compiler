package parser;

import java.util.List;
import java.util.ArrayList;

import java_cup.runtime.Symbol;
import lex.NoTokenMatchException;
import syntaxtree.*;

// init with {: getScanner().init(); :};
scan with {:
Symbol sym = null;
while (sym == null) {
    try {
        sym = getScanner().next_token();
    } catch (NoTokenMatchException e) {
        System.out.println(e);
    }
}
return sym;
:};

terminal PUBLIC, CLASS, RETURN, LENGTH, THIS, NEW, VOID, STRING, IF, ELSE, WHILE, PRINT, LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK, SEMICOLON, COMMA, DOT, EQ, NOT, ANDAND, LT, PLUS, MINUS, MULT, STATIC, MAIN;

terminal String IDENTIFIER;
terminal Boolean TRUE, FALSE;
terminal BooleanType BOOLEAN;
terminal Integer NUMBER;
terminal IntegerType INT;

non terminal Program Program;
non terminal MainClass MainClass;
non terminal ClassDeclSimple ClassDecl;
non terminal List<ClassDecl> ClassDeclList;
non terminal Exp Exp, op;
non terminal List<Exp> ExpList, ExpRest;
non terminal MethodDecl MethodDecl;
non terminal List<MethodDecl> MethodDeclList;
non terminal VarDecl VarDecl;
non terminal List<VarDecl> VarDeclList;
non terminal Statement Statement;
non terminal StatementList StatementList;
non terminal Type Type;
non terminal Formal Formal;
non terminal List<Formal> FormalList, FormalRest;
non terminal Identifier Identifier;

// XXX: behövs detta?
//precedence left PUBLIC, CLASS, RETURN, LENGTH, THIS, NEW, VOID, STRING, IF, ELSE, WHILE, PRINT, LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK, SEMICOLON, COMMA, DOT, EQ, NOT, ANDAND, LT, PLUS, MINUS, MULT, STATIC;

precedence left IDENTIFIER;

precedence left ANDAND;
precedence left LT;
precedence left PLUS, MINUS;
precedence left MULT;

// XXX: Är det här verkligen rätt gramatik
precedence right NOT;
precedence left DOT;
precedence left LBRACK, RBRACK;
precedence left LPAREN, RPAREN;

/* TODO: Lägg till "error"-terminals för felhantering. */

start with Program;

Program ::= MainClass:mainClass ClassDeclList:classDeclList
{: RESULT = new Program(mainClass, classDeclList); :}
            ;

ClassDeclList   ::= ClassDecl:classDecl ClassDeclList:list
{:  
    list.add(classDecl);
    RESULT = list; 
:}
                |   
{:
    RESULT = new ArrayList<ClassDecl>(); 
:}
                ;

ClassDecl   ::= CLASS Identifier:id LBRACE VarDeclList:varDeclList MethodDeclList:methodDeclList RBRACE
{:
    RESULT = new ClassDeclSimple(id, varDeclList, methodDeclList);
:}
            ;

MainClass   ::= CLASS Identifier:className LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK Identifier:args RPAREN LBRACE StatementList:statements RBRACE RBRACE
{:
    RESULT = new MainClass(className, args, statements);
:}
            ;

VarDeclList ::= VarDecl:varDecl VarDeclList:list
{: 
    list.add(varDecl); 
    RESULT = list;
:}
            |   
{: 
    RESULT = new ArrayList<VarDecl>(); 
:}
            ;

VarDecl ::= Type:type Identifier:name SEMICOLON
{:
    RESULT = new VarDecl(type, name);
:}
        ;

MethodDeclList  ::= MethodDecl:methodDecl MethodDeclList:list
{: 
    list.add(methodDecl); 
    RESULT = list;
:}
                |   
{: 
    RESULT = new ArrayList<MethodDecl>(); 
:}
                ;

MethodDecl  ::= PUBLIC Type:retType Identifier:methodName LPAREN FormalList:args RPAREN LBRACE VarDeclList:varDeclList StatementList:stmList RETURN Exp:retExp SEMICOLON RBRACE
{:
    RESULT = new MethodDecl(retType, methodName, args, varDeclList, stmList, retExp);
:}
            ;

Formal  ::= Type:type Identifier:name
{:
    RESULT = new Formal(type, name);
:}
        ;

FormalList  ::= Formal:formal FormalRest:list
{:
    list.add(formal);
    RESULT = list;
:}
            |   
{:
    RESULT = new ArrayList<Formal>();
:}
            ;

FormalRest ::= COMMA Formal:formal FormalRest:list
{:
    list.add(formal);
    RESULT = list;
:}
            |   
{:
    RESULT = new ArrayList<Formal>();
:}
;

Type    ::= INT LBRACK RBRACK
{: RESULT = new IntArrayType(); :}
        |   BOOLEAN
{: RESULT = new BooleanType(); :}
        |   INT
{: RESULT = new IntegerType(); :}
        |   IDENTIFIER:id
{: RESULT = new IdentifierType(id); :}
        ;

StatementList   ::= Statement:stm StatementList:list
{: 
    list.add(stm); 
    RESULT = list;
:}
                |   
{:
    RESULT = new StatementList();
:}
                ;

Statement ::= LBRACE StatementList:list RBRACE
{:  RESULT = new Block(list); :}
            | IF LPAREN Exp:exp RPAREN Statement:ifStm ELSE Statement:elseStm
{: RESULT = new If(exp, ifStm, elseStm); :}
            | WHILE LPAREN Exp:exp RPAREN Statement:stm
{: RESULT = new While(exp, stm); :}
            | PRINT LPAREN Exp:exp RPAREN SEMICOLON
{: RESULT = new Print(exp); :}
            | Identifier:id EQ Exp:exp SEMICOLON
{: RESULT = new Assign(id, exp); :}
            | Identifier:id LBRACK Exp:index RBRACK EQ Exp:value SEMICOLON
{: RESULT = new ArrayAssign(id, index, value); :}
            ;

Exp         ::=   op:operator
{: RESULT = operator; :}
                | Exp:id LBRACK Exp:index RBRACK
{: RESULT = new ArrayLookup(id, index); :}
                | Exp:id DOT LENGTH
{: RESULT = new ArrayLength(id); :}
                | Exp:obj DOT Identifier:method LPAREN ExpList:args RPAREN
{: RESULT = new Call(obj, method, args); :}
                | NUMBER:n
{: RESULT = new IntegerLiteral(n); :}
                | TRUE
{: RESULT = new True(); :}
                | FALSE
{: RESULT = new False(); :}
                | IDENTIFIER:id
{: RESULT = new IdentifierExp(id); :}
                | THIS
{: RESULT = new This(); :}
                | NEW INT LBRACK Exp:size RBRACK
{: RESULT = new NewArray(size); :}
                | NEW Identifier:id LPAREN RPAREN
{: RESULT = new NewObject(id); :}
                | NOT Exp:exp
{: RESULT = new Not(exp); :}
                | LPAREN Exp:exp RPAREN
{: RESULT = exp; :}
                ;

op          ::=   Exp:left ANDAND Exp:right
{:
    RESULT = new And(left, right);
:}
                | Exp:left LT Exp:right
{:
    RESULT = new LessThan(left, right);
:}
                | Exp:left PLUS Exp:right
{:
    RESULT = new Plus(left, right);
:}
                | Exp:left MINUS Exp:right
{:
    RESULT = new Minus(left, right);
:}
                | Exp:left MULT Exp:right
{:
    RESULT = new Times(left, right);
:}
                ;

ExpList ::= Exp:exp ExpRest:list
{: 
list.add(exp); 
RESULT = list;
:}
            ;

ExpRest ::= COMMA Exp:exp ExpRest:list
{: 
list.add(exp); 
RESULT = list;
:}
        |   
{: RESULT = new ArrayList<Exp>(); :}
        ;

    
Identifier  ::= IDENTIFIER:id
{: RESULT = new Identifier(id); :}
            ;
