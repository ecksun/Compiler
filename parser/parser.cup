// TODO byt ut VarDecl mot VarDeclList där det är lämpligt
// TODO byt ut MethodDecl mot MethodDeclList där det är lämpligt
// TODO se över VarDecl och MethodDecl så att de är korrekta

import java_cup.runtime.*;

// init with {: getScanner().init(); :};
scan with {: return getScanner().next_token(); :};

terminal PUBLIC, CLASS, RETURN, LENGTH, THIS, NEW, VOID, BOOLEAN, INT, STRING, IF, ELSE, WHILE, PRINT, LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK, SEMICOLON, COMMA, DOT, EQ, NOT, ANDAND, LT, PLUS, MINUS, MULT, IDENTIFIER, STATIC, empty;

terminal Boolean TRUE, FALSE;
terminal Integer NUMBER;

non terminal Program, MainClass, ClassDecl, VarDecl, VarDeclList, MethodDecl, Statement, StatementList, Type, ExpList, ExpRest, FormalList, FormalRest, ClassDeclList;

non terminal Exp Exp, op;
non terminal MethodDeclList MethodDeclList;


precedence left ANDAND;
precedence left LT;
precedence left PLUS, MINUS;
precedence left MULT;

// XXX: Är det här verkligen rätt gramatik
precedence right NOT;
precedence left DOT;
precedence left LBRACK, RBRACK;
precedence left LPAREN, RPAREN;

start with Program;

Program ::= MainClass:mainClass ClassDeclList:classDeclList
{: RESULT = new Program(mainClass, classDeclList); :}
            ;

ClassDeclList   ::= ClassDecl:classDecl ClassDeclList
{:  
    if (RESULT == null) {
        RESULT = new ClassDeclList(); 
    }
    RESULT.addElement(classDecl);
:}
                ;

ClassDecl   ::= CLASS IDENTIFIER:id LBRACE VarDeclList:varDeclList MethodDeclList:methodDeclList RBRACE
{:
    RESULT = new ClassDeclSimple(id, varDeclList, methodDeclList);
:}
            |   empty
            ;

MainClass   ::= CLASS IDENTIFIER:className LBRACE PUBLIC STATIC VOID IDENTIFIER LPAREN STRING LBRACE RBRACE IDENTIFIER:args RPAREN LBRACE StatementList:statementList RBRACE RBRACE
{:
// XXX: MainClass tar Statement och inte StatementList. Vem gör fel?
    RESULT = new MainClass(className, args, statementList);
:}
            ;

VarDeclList ::= VarDecl:varDecl VarDeclList
{: RESULT.addElement(varDecl); :}
            |   empty
{: RESULT = new VarDeclList(); :}
            ;

VarDecl ::= Type IDENTIFIER SEMICOLON;

MethodDeclList  ::= MethodDecl:methodDecl MethodDeclList
{: RESULT.addElement(methodDecl); :}
                |   empty
{: RESULT = new MethodDeclList(); :}
                ;

MethodDecl ::= PUBLIC Type IDENTIFIER LPAREN FormalList RPAREN LBRACE VarDecl StatementList RETURN Exp SEMICOLON RBRACE;

FormalList ::= Type IDENTIFIER FormalRest
            | empty;

FormalRest ::= COMMA Type IDENTIFIER;

Type ::= INT LBRACK RBRACK
        | BOOLEAN
        | INT
        | IDENTIFIER;

StatementList ::= Statement
                | Statement Statement
                | empty
                ;

Statement ::= LBRACE StatementList RBRACE
            | IF LPAREN Exp RPAREN Statement ELSE Statement
            | WHILE LPAREN Exp RPAREN Statement
            | PRINT LPAREN Exp RPAREN SEMICOLON
            | IDENTIFIER EQ Exp SEMICOLON
            | IDENTIFIER LBRACK Exp RBRACK EQ Exp SEMICOLON
            ;

Exp         ::=   Exp:left op:operator Exp:right
{: RESULT = new Op(operator, left, right); :}
                | Exp LBRACK Exp RBRACK
                | Exp DOT LENGTH
                | Exp DOT IDENTIFIER LPAREN ExpList RPAREN
                | NUMBER
                | TRUE
                | FALSE
                | IDENTIFIER
                | THIS
                | NEW INT LBRACK Exp RBRACK
                | NEW IDENTIFIER LPAREN RPAREN
                | NOT Exp
                | LPAREN Exp RPAREN
                ;

op          ::=   ANDAND 
                    {: RESULT = sym.ANDAND; :}
                | LT 
                    {: RESULT = sym.LT; :}
                | PLUS 
                    {: RESULT = sym.PLUS; :}
                | MINUS 
                    {: RESULT = sym.MINUS; :}
                | MULT 
                    {: RESULT = sym.MULT; :}
                ;

ExpList     ::= Exp ExpRest 
                ;

ExpRest     ::= COMMA Exp ExpRest
                | empty
                ;

