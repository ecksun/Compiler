
import java_cup.runtime.*;

init with {: scanner.init(); :};
scan with {: return scanner.next_token(); :};

terminal PUBLIC, CLASS, RETURN, LENGTH, THIS, NEW, VOID, BOOLEAN, FALSE, TRUE, INT, STRING, IF, ELSE, WHILE, PRINT, LBRACE, RBRACE, LPAREN, RPAREN, LBRACK, RBRACK, SEMICOLON, COMMA, DOT, EQ, NOT, ANDAND, LT, PLUS, MINUS, MULT, IDENTIFIER;

non terminal Program, MainClass;

Program ::= MainClass ClassDecl;

ClassDecl ::= empty
            | ClassDecl ClassDecl
            | CLASS IDENTIFIER LBRACE VarDecl MethodDecl RBRACE
            ;

MainClass ::= CLASS IDENTIFIER LBRACE PUBLIC STATIC VOID IDENTIFIER LPAREN STRING LBRACE RBRACE IDENTIFIER RPAREN LBRACE Statement* RBRACE RBRACE


VarDecl ::= Type IDENTIFIER SEMICOLON;

MethodDecl ::= PUBLIC Type IDENTIFIER LPAREN FormalList RPAREN LBRACE VarDecl StatementList RETURN Exp SEMICOLOR RBRACE;

FormalList ::= Type IDENTIFIER FormalRest
            | empty;

Type ::= INT LBRACK RBRACK
        | BOOLEAN
        | INT
        | IDENTIFIER;

StatementList ::= Statement
                | Statement Statement
                | empty
                ;

Statement ::= LBRACE StatementList RBRACE
            | IF LPAREN Exp RPAREN Statement ELSE statement
            | WHILE LPAREN Exp RPAREN Statement
            | PRINT LPAREN Exp RPAREN SEMICOLON
            | IDENTIFIER = Exp SEMICOLON
            | IDENTIFIER LBRACK Exp RBRACK EQ Exp SEMICOLON
            ;

Exp         ::= Exp op Exp
                | Exp LBRACK Exp RBRACK
                | Exp DOT LENGTH
                | EXP DOT IDENTIFIER LPAREN ExpList RPAREN
                | INTEGER
                | TRUE
                | FALSE
                | IDENTIFIER
                | THIS
                | NEW INT LBRACK Exp RBRACK
                | NEW IDENTIFIER LPAREN RPAREN
                | NOT Exp
                | LPAREN Exp RPAREN
                ;

op          ::= ANDAND
                | LT
                | PLUS
                | MINUS
                | MULT

ExpList     ::= Exp ExpRest
                | empty

ExpRest     ::= ExpRest ExpRest
                | COMMA Exp


empty ::= ;
