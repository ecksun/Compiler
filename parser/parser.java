
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 06 12:04:54 CEST 2011
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 06 12:04:54 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\004\000\002\020" +
    "\004\000\002\004\010\000\002\004\003\000\002\003\023" +
    "\000\002\005\005\000\002\006\017\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\007\005" +
    "\000\002\007\011\000\002\007\007\000\002\007\007\000" +
    "\002\007\006\000\002\007\011\000\002\012\005\000\002" +
    "\012\006\000\002\012\005\000\002\012\010\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\007\000\002\012\006\000" +
    "\002\012\004\000\002\012\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\013\004\000\002\014\005\000\002\014\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\005\006\001\002\000\004\002\206\001" +
    "\002\000\006\005\142\046\143\001\002\000\004\044\007" +
    "\001\002\000\004\024\010\001\002\000\004\004\011\001" +
    "\002\000\004\045\012\001\002\000\004\012\013\001\002" +
    "\000\004\044\014\001\002\000\004\026\015\001\002\000" +
    "\004\017\016\001\002\000\004\024\017\001\002\000\004" +
    "\025\020\001\002\000\004\044\021\001\002\000\004\027" +
    "\022\001\002\000\004\024\023\001\002\000\016\020\032" +
    "\022\031\023\025\024\024\044\027\046\030\001\002\000" +
    "\016\020\032\022\031\023\025\024\024\044\027\046\030" +
    "\001\002\000\004\026\132\001\002\000\020\006\ufff2\020" +
    "\032\022\031\023\025\024\024\025\ufff2\044\027\001\002" +
    "\000\006\030\121\035\120\001\002\000\006\006\ufff0\025" +
    "\ufff0\001\002\000\004\026\114\001\002\000\004\026\036" +
    "\001\002\000\004\025\034\001\002\000\004\025\035\001" +
    "\002\000\006\005\ufffc\046\ufffc\001\002\000\022\010\044" +
    "\011\040\014\043\015\041\016\037\026\047\036\046\044" +
    "\045\001\002\000\032\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\046\uffe5\001\002\000\006\016\106\044\105\001\002" +
    "\000\032\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\046\uffe4" +
    "\001\002\000\022\027\101\030\060\034\056\037\052\040" +
    "\061\041\054\042\051\043\053\001\002\000\032\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\046\uffe3\001\002\000\032" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\046\uffe1\001\002" +
    "\000\032\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\046\uffe2" +
    "\001\002\000\022\010\044\011\040\014\043\015\041\016" +
    "\037\026\047\036\046\044\045\001\002\000\022\010\044" +
    "\011\040\014\043\015\041\016\037\026\047\036\046\044" +
    "\045\001\002\000\022\027\057\030\060\034\056\037\052" +
    "\040\061\041\054\042\051\043\053\001\002\000\022\010" +
    "\uffd9\011\uffd9\014\uffd9\015\uffd9\016\uffd9\026\uffd9\036\uffd9" +
    "\044\uffd9\001\002\000\022\010\uffdc\011\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\026\uffdc\036\uffdc\044\uffdc\001\002\000\022" +
    "\010\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8\026\uffd8\036" +
    "\uffd8\044\uffd8\001\002\000\022\010\uffda\011\uffda\014\uffda" +
    "\015\uffda\016\uffda\026\uffda\036\uffda\044\uffda\001\002\000" +
    "\022\010\044\011\040\014\043\015\041\016\037\026\047" +
    "\036\046\044\045\001\002\000\006\007\064\044\065\001" +
    "\002\000\032\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\046" +
    "\uffdd\001\002\000\022\010\044\011\040\014\043\015\041" +
    "\016\037\026\047\036\046\044\045\001\002\000\022\010" +
    "\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\026\uffdb\036\uffdb" +
    "\044\uffdb\001\002\000\022\030\060\031\063\034\056\037" +
    "\052\040\061\041\054\042\051\043\053\001\002\000\032" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046\uffe8\001\002" +
    "\000\032\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\046\uffe7" +
    "\001\002\000\004\026\066\001\002\000\022\010\044\011" +
    "\040\014\043\015\041\016\037\026\047\036\046\044\045" +
    "\001\002\000\024\030\060\033\074\034\056\037\052\040" +
    "\061\041\054\042\051\043\053\046\073\001\002\000\004" +
    "\027\071\001\002\000\032\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\046\uffe6\001\002\000\004\027\uffd7\001\002\000" +
    "\004\027\uffd5\001\002\000\022\010\044\011\040\014\043" +
    "\015\041\016\037\026\047\036\046\044\045\001\002\000" +
    "\024\030\060\033\074\034\056\037\052\040\061\041\054" +
    "\042\051\043\053\046\073\001\002\000\004\027\uffd6\001" +
    "\002\000\032\027\uffe9\030\060\031\uffe9\032\uffe9\033\uffe9" +
    "\034\056\037\052\040\061\041\054\042\051\043\053\046" +
    "\uffe9\001\002\000\032\027\uffde\030\060\031\uffde\032\uffde" +
    "\033\uffde\034\056\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\046\uffde\001\002\000\014\020\032\022\031\023\025" +
    "\024\024\044\027\001\002\000\004\021\103\001\002\000" +
    "\014\020\032\022\031\023\025\024\024\044\027\001\002" +
    "\000\022\006\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\044\uffee\001\002\000\004\026\112\001\002" +
    "\000\004\030\107\001\002\000\022\010\044\011\040\014" +
    "\043\015\041\016\037\026\047\036\046\044\045\001\002" +
    "\000\022\030\060\031\111\034\056\037\052\040\061\041" +
    "\054\042\051\043\053\001\002\000\032\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\046\uffe0\001\002\000\004\027\113" +
    "\001\002\000\032\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\046\uffdf\001\002\000\022\010\044\011\040\014\043\015" +
    "\041\016\037\026\047\036\046\044\045\001\002\000\022" +
    "\027\116\030\060\034\056\037\052\040\061\041\054\042" +
    "\051\043\053\001\002\000\014\020\032\022\031\023\025" +
    "\024\024\044\027\001\002\000\022\006\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\044\uffed\001\002" +
    "\000\022\010\044\011\040\014\043\015\041\016\037\026" +
    "\047\036\046\044\045\001\002\000\022\010\044\011\040" +
    "\014\043\015\041\016\037\026\047\036\046\044\045\001" +
    "\002\000\022\030\060\031\123\034\056\037\052\040\061" +
    "\041\054\042\051\043\053\001\002\000\004\035\124\001" +
    "\002\000\022\010\044\011\040\014\043\015\041\016\037" +
    "\026\047\036\046\044\045\001\002\000\022\030\060\032" +
    "\126\034\056\037\052\040\061\041\054\042\051\043\053" +
    "\001\002\000\022\006\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\044\uffea\001\002\000\022\030\060" +
    "\032\130\034\056\037\052\040\061\041\054\042\051\043" +
    "\053\001\002\000\022\006\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\044\uffeb\001\002\000\006\006" +
    "\ufff1\025\ufff1\001\002\000\022\010\044\011\040\014\043" +
    "\015\041\016\037\026\047\036\046\044\045\001\002\000" +
    "\022\027\134\030\060\034\056\037\052\040\061\041\054" +
    "\042\051\043\053\001\002\000\004\032\135\001\002\000" +
    "\022\006\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\044\uffec\001\002\000\004\025\137\001\002\000" +
    "\022\006\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\044\uffef\001\002\000\004\002\001\001\002\000" +
    "\006\005\142\046\143\001\002\000\004\044\144\001\002" +
    "\000\006\005\ufffd\046\ufffd\001\002\000\004\024\145\001" +
    "\002\000\010\013\151\016\152\044\150\001\002\000\004" +
    "\044\203\001\002\000\004\004\156\001\002\000\004\044" +
    "\ufff3\001\002\000\004\044\ufff5\001\002\000\006\030\153" +
    "\044\ufff4\001\002\000\004\031\154\001\002\000\004\044" +
    "\ufff6\001\002\000\004\025\202\001\002\000\010\013\151" +
    "\016\152\044\150\001\002\000\004\044\160\001\002\000" +
    "\004\026\161\001\002\000\012\013\151\016\152\044\150" +
    "\046\164\001\002\000\004\027\172\001\002\000\004\044" +
    "\165\001\002\000\004\027\ufff8\001\002\000\004\033\166" +
    "\001\002\000\010\013\151\016\152\044\150\001\002\000" +
    "\004\027\ufff9\001\002\000\004\044\171\001\002\000\004" +
    "\027\ufff7\001\002\000\004\024\173\001\002\000\010\013" +
    "\151\016\152\044\150\001\002\000\016\020\032\022\031" +
    "\023\025\024\024\044\027\046\030\001\002\000\004\006" +
    "\176\001\002\000\022\010\044\011\040\014\043\015\041" +
    "\016\037\026\047\036\046\044\045\001\002\000\022\030" +
    "\060\032\200\034\056\037\052\040\061\041\054\042\051" +
    "\043\053\001\002\000\004\025\201\001\002\000\004\025" +
    "\ufffa\001\002\000\006\005\ufffe\046\ufffe\001\002\000\004" +
    "\032\204\001\002\000\020\004\ufffb\020\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\044\ufffb\046\ufffb\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\140\020\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\025" +
    "\010\032\001\001\000\006\007\025\010\135\001\001\000" +
    "\002\001\001\000\004\007\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\077\001" +
    "\001\000\004\012\047\001\001\000\004\017\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\061\001\001\000\002\001" +
    "\001\000\004\017\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\066\013\067\001" +
    "\001\000\006\014\071\017\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\074\001\001\000\006\014\075\017\054\001\001" +
    "\000\002\001\001\000\004\017\054\001\001\000\004\017" +
    "\054\001\001\000\004\007\101\001\001\000\002\001\001" +
    "\000\004\007\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\107\001\001\000\004" +
    "\017\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\114\001\001\000\004\017\054" +
    "\001\001\000\004\007\116\001\001\000\002\001\001\000" +
    "\004\012\126\001\001\000\004\012\121\001\001\000\004" +
    "\017\054\001\001\000\002\001\001\000\004\012\124\001" +
    "\001\000\004\017\054\001\001\000\002\001\001\000\004" +
    "\017\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\132\001\001\000\004\017\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\140\020\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\146\011\145\001\001\000\002\001\001\000\004" +
    "\006\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\162\015\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\166\001\001\000\004\011\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\173\011\145\001\001\000\006\007\025\010\174" +
    "\001\001\000\002\001\001\000\004\012\176\001\001\000" +
    "\004\017\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 scanner.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpRest ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRest",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpRest ::= COMMA Exp ExpRest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRest",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpList ::= Exp ExpRest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op ::= ANDAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= LPAREN Exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= NOT Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= NEW IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= NEW INT LBRACK Exp RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= THIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= Exp DOT IDENTIFIER LPAREN ExpList RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= Exp DOT LENGTH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= Exp LBRACK Exp RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= Exp op Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= IDENTIFIER LBRACK Exp RBRACK EQ Exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= IDENTIFIER EQ Exp SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= PRINT LPAREN Exp RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= WHILE LPAREN Exp RPAREN Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= IF LPAREN Exp RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StatementList ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StatementList ::= Statement Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= INT LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FormalRest ::= COMMA Type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalRest",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FormalList ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FormalList ::= Type IDENTIFIER FormalRest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MethodDecl ::= PUBLIC Type IDENTIFIER LPAREN FormalList RPAREN LBRACE VarDecl StatementList RETURN Exp SEMICOLON RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainClass ::= CLASS IDENTIFIER LBRACE PUBLIC STATIC VOID IDENTIFIER LPAREN STRING LBRACE RBRACE IDENTIFIER RPAREN LBRACE StatementList RBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDecl ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDecl ::= CLASS IDENTIFIER LBRACE VarDecl MethodDecl RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ClassDeclList ::= ClassDecl ClassDeclList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MainClass ClassDeclList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

